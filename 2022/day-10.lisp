(defun input-to-list ()
  (with-open-file (stream "input-10")
    (loop :for line = (read-line stream nil nil)
           :while line
          :collect (list (first (uiop:split-string line :separator " "))
                         (if (second (uiop:split-string line :separator " "))
                             (read-from-string (second (uiop:split-string line :separator " "))))))))

(defun day-10-1 (instructions &optional (cycles 0) (register 1) (sgnl-strngth 0))
  (if instructions
      (cond ((equal (first (car instructions)) "noop")
             (setq cycles (+ cycles 1))
             (when (= cycles 20) (setq sgnl-strngth (+ sgnl-strngth (* register 20)))
                   (format t "~&~A~%" (* register 20)))
             (when (= cycles 60) (setq sgnl-strngth (+ sgnl-strngth (* register 60)))
                   (format t "~&~A~%" (* register 60)))
             (when (= cycles 100) (setq sgnl-strngth (+ sgnl-strngth (* register 100)))
                   (format t "~&~A~%" (* register 100)))
             (when (= cycles 140) (setq sgnl-strngth (+ sgnl-strngth (* register 140)))
                   (format t "~&~A~%" (* register 140)))
             (when (= cycles 180) (setq sgnl-strngth (+ sgnl-strngth (* register 180)))
                   (format t "~&~A~%" (* register 181)))
             (when (= cycles 220) (setq sgnl-strngth (+ sgnl-strngth (* register 220)))
                   (format t "~&~A~%" (* register 220)))
             (format t "~&~A, Cycle: ~A, Register: ~A~%" (car instructions) cycles register)
             (day-10-1 (cdr instructions) cycles register sgnl-strngth))
            ((equal (first (car instructions)) "addx")
             (loop :for i :from 1 :to 2
                   :do (progn)
                       (setq cycles (+ cycles 1))
                       (when (= cycles 20) (setq sgnl-strngth (+ sgnl-strngth (* register 20)))
                             (format t "~&~A~%" (* register 20)))
                       (when (= cycles 60) (setq sgnl-strngth (+ sgnl-strngth (* register 60)))
                             (format t "~&~A~%" (* register 60)))
                       (when (= cycles 100) (setq sgnl-strngth (+ sgnl-strngth (* register 100)))
                             (format t "~&~A~%" (* register 100)))
                       (when (= cycles 140) (setq sgnl-strngth (+ sgnl-strngth (* register 140)))
                             (format t "~&~A~%" (* register 140)))
                       (when (= cycles 180) (setq sgnl-strngth (+ sgnl-strngth (* register 180)))
                             (format t "~&~A~%" (* register 181)))
                       (when (= cycles 220) (setq sgnl-strngth (+ sgnl-strngth (* register 220)))
                             (format t "~&~A~%" (* register 220))))
             (format t "~&~A, Cycle: ~A, Register: ~A~%" (car instructions) cycles register)
             (setq register (+ register (second (car instructions))))
             (day-10-1 (cdr instructions) cycles register sgnl-strngth)))
      sgnl-strngth))


(defun day-10-2 (instructions &optional (cycles 0) (register 1) (row '()) (crt '()))
  (if instructions
      (cond ((equal (first (car instructions)) "noop")
             (format t "register: ~A, cycles: ~A~%" register cycles)
             (if (and (<= (1- register) cycles) (>= (1+ register) cycles))
                 (setq row (concatenate 'string row "#"))
                 (setq row (concatenate 'string row ".")))
             (setq cycles (+ cycles 1))
             (when (= (length row) 40)
               (push row crt)
               (setq row "")
               (setq cycles 0))           ; "" or "." or "#"
             (day-10-2 (cdr instructions) cycles register row crt))
            ((equal (first (car instructions)) "addx")
             (loop :for i :from 1 :to 2
                   :do (progn
                         (format t "register: ~A, cycles: ~A~%" register cycles)
                         (if (and (<= (1- register) cycles) (>= (1+ register) cycles))
                             (setq row (concatenate 'string row "#"))
                             (setq row (concatenate 'string row ".")))
                         (setq cycles (+ cycles 1))
                         (when (= (length row) 40)
                           (push row crt)
                           (setq row "")
                           (setq cycles 0))))
             (setq register (+ register (second (car instructions))))
             (day-10-2 (cdr instructions) cycles register row crt)))
      (reverse crt)))
