(defun input (input-file)
  (uiop:read-file-lines input-file))

(defun make-monkeys (input-file)
  (let ((monkeys (make-hash-table))
        (cur-mon ""))
    (with-open-file (stream input-file)
      (loop :for line = (read-line stream nil nil)
            :while line
            :do (progn
                  (cond ((and (> (length line) 0) (equal (char line 0) #\M))
                         (setq line (remove #\: line))
                         (setq line (remove #\space line))
                         (setq cur-mon line)
                         (setf (gethash (read-from-string cur-mon) monkeys) (list)))
                        ((and (> (length line) 0) (equal (char line 2) #\S))
                         (setq line (remove #\, line))
                         (setf (gethash (read-from-string cur-mon) monkeys) (mapcar #'(lambda (x)
                                                                                        (read-from-string x))
                                                                                    (uiop:split-string (subseq line 18) :separator " "))))))))
    monkeys))

(defun day-11-1 (input-file)
  (let ((monkeys (make-monkeys input-file))
        (monkeys-actions (input input-file))
        (cur-mon "")
        (math "")
        (math-with "")
        (devisible 0)
        (true-throw "")
        (false-throw "")
        (one-item "")
        (inspect-cntr (make-hash-table)))
    (loop :for key being the hash-key of monkeys
          :do (setf (gethash key inspect-cntr) 0))
    (loop :repeat 20
          :do (loop :for line :in monkeys-actions
                    :do (progn
                          (cond ((and (> (length line) 0) (equal (char line 0) #\M))
                                 (setq line (remove #\: line))
                                 (setq line (remove #\space line))
                                 (setq cur-mon line))
                                ((and (> (length line) 0) (equal (char line 2) #\O))
                                 (setq math (first (uiop:split-string (subseq line 23) :separator " ")))
                                 (setq math-with (second (uiop:split-string (subseq line 23) :separator " "))))
                                ((and (> (length line) 0) (equal (char line 2) #\T))
                                 (setq devisible (read-from-string (subseq line 21))))
                                ((and (> (length line) 0) (equal (char line 10) #\e))
                                 (setq line (subseq line 22))
                                 (setq line (remove #\space line))
                                 (setq true-throw (string-capitalize line)))
                                ((and (> (length line) 0) (equal (char line 10) #\s))
                                 (setq line (subseq line 23))
                                 (setq line (remove #\space line))
                                 (setq false-throw (string-capitalize line))
                                 (loop :for i :from 1 :to (length (gethash (read-from-string cur-mon) monkeys))
                                       :do (progn
                                             (setq one-item (pop (gethash (read-from-string cur-mon) monkeys)))
                                             (cond ((and (equal "*" math) (not (equal math-with "old")))
                                                    (setq one-item (* one-item (read-from-string math-with)))
                                                    (setq one-item (floor (/ one-item 3)))
                                                    (if (integerp (/ one-item devisible))
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (format t "Before: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    (format t "After: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    )
                                                   ((and (equal "*" math) (equal math-with "old"))
                                                    (setq one-item (* one-item one-item))
                                                    (setq one-item (floor (/ one-item 3)))
                                                    (if (integerp (/ one-item devisible))
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (format t "Before: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    (format t "After: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    )
                                                   ((and (equal "+" math) (not (equal math-with "old")))
                                                    (setq one-item (+ one-item (read-from-string math-with)))
                                                    (setq one-item (floor (/ one-item 3)))
                                                    (if (integerp (/ one-item devisible))
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (format t "Before: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    (format t "After: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (format t "+ - ~A num - ~A~%" math math-with))
                                                   ((and (equal "+" math) (equal math-with "old"))
                                                    (setq one-item (+ one-item one-item))
                                                    (setq one-item (floor (/ one-item 3)))
                                                    (if (integerp (/ one-item devisible))
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (format t "Before: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    (format t "After: ~A~%" (gethash (read-from-string cur-mon) inspect-cntr))
                                                    (format t "+ - ~A old - ~A~%" math math-with))
                                                   )
                                             ;; (setf (gethash ()))
                                             )))
                                ;; here, iterate over the cur-mon-s items, one by one
                                ;; see some examples for push pop in hash table below
                                ))))
    (* (first (sort (loop :for value being the hash-values of inspect-cntr
                          :collect value) #'>))
       (second (sort (loop :for value being the hash-values of inspect-cntr
                :collect value) #'>)))
    ))

(defun big-mod (input-file)
  (let* ((big-mod 1)
         (monkey-actions (input input-file)))
    (format t "~A~%" monkey-actions)
    (loop :for line :in monkey-actions
          :do (when (and (> (length line) 0) (equal (char line 2) #\T))
                (format t "Line: ~A~%" line)
                (setq big-mod (* big-mod (read-from-string (subseq line 21))))))
    big-mod))

(defun day-11-2 (input-file)
  (let ((monkeys (make-monkeys input-file))
        (monkeys-actions (input input-file))
        (cur-mon "")
        (math "")
        (math-with "")
        (devisible 0)
        (true-throw "")
        (false-throw "")
        (one-item "")
        (inspect-cntr (make-hash-table))
        (big-mod (big-mod input-file)))
    (loop :for key being the hash-key of monkeys
          :do (setf (gethash key inspect-cntr) 0))
    (loop :for i :from 1 :to 10000
          :do (loop :for line :in monkeys-actions
                    :do (progn
                          (cond ((and (> (length line) 0) (equal (char line 0) #\M))
                                 (setq line (remove #\: line))
                                 (setq line (remove #\space line))
                                 (setq cur-mon line))
                                ((and (> (length line) 0) (equal (char line 2) #\O))
                                 (setq math (first (uiop:split-string (subseq line 23) :separator " ")))
                                 (setq math-with (second (uiop:split-string (subseq line 23) :separator " "))))
                                ((and (> (length line) 0) (equal (char line 2) #\T))
                                 (setq devisible (read-from-string (subseq line 21))))
                                ((and (> (length line) 0) (equal (char line 10) #\e))
                                 (setq line (subseq line 22))
                                 (setq line (remove #\space line))
                                 (setq true-throw (string-capitalize line)))
                                ((and (> (length line) 0) (equal (char line 10) #\s))
                                 (setq line (subseq line 23))
                                 (setq line (remove #\space line))
                                 (setq false-throw (string-capitalize line))
                                 (loop :for i :from 1 :to (length (gethash (read-from-string cur-mon) monkeys))
                                       :do (progn
                                             (setq one-item (pop (gethash (read-from-string cur-mon) monkeys)))
                                             (cond ((and (equal "*" math) (not (equal math-with "old")))
                                                    (setq one-item (mod (* one-item (read-from-string math-with)) big-mod))
                                                    (if (equal (mod one-item devisible) 0)
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    )
                                                   ((and (equal "*" math) (equal math-with "old"))
                                                    (setq one-item (mod (* one-item one-item) big-mod))
                                                    (if (equal (mod one-item devisible) 0)
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    )
                                                   ((and (equal "+" math) (not (equal math-with "old")))
                                                    (setq one-item (mod (+ one-item (read-from-string math-with)) big-mod))
                                                    (if (equal (mod one-item devisible) 0)
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    )
                                                   ((and (equal "+" math) (equal math-with "old"))
                                                    (setq one-item (mod (+ one-item one-item) big-mod))
                                                    (if (equal (mod one-item devisible) 0)
                                                        (setf (gethash (read-from-string true-throw) monkeys)
                                                              (append (gethash (read-from-string true-throw) monkeys) (list one-item)))
                                                        (setf (gethash (read-from-string false-throw) monkeys)
                                                              (append (gethash (read-from-string false-throw) monkeys) (list one-item)))
                                                        )
                                                    (setf (gethash (read-from-string cur-mon) inspect-cntr)
                                                          (1+ (gethash (read-from-string cur-mon) inspect-cntr)))
                                                    )
                                                   )
                                             ;; (setf (gethash ()))
                                             )))
                                ;; here, iterate over the cur-mon-s items, one by one
                                ;; see some examples for push pop in hash table below
                                )))
              (when (= i 1)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 20)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 1000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 2000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 3000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 4000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 5000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 6000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 7000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 8000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
              (when (= i 9000)
                (loop :for value being the hash-values of inspect-cntr :do (format t "~A~%" value))
                (format t "~%")
                (force-output))
          )
    (* (first (sort (loop :for value being the hash-values of inspect-cntr
                          :collect value) #'>))
       (second (sort (loop :for value being the hash-values of inspect-cntr
                           :collect value) #'>)))
    ))
