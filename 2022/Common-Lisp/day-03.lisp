(defun day-03-1 ()
  (let ((first-half (list))
        (second-half (list))
        (common-item "")
        (combined-prio 0))
    (with-open-file (stream "input-03")
      (loop :for line = (read-line stream nil nil)
            :while line
            :do (progn
                  (setq first-half (subseq (concatenate 'list line) 0 (/ (length line) 2)))
                  (setq second-half (nthcdr (/ (length line) 2) (concatenate 'list line)))
                  (setq common-item (car (intersection first-half second-half)))
                  (setq combined-prio (+ combined-prio (if (lower-case-p common-item)
                                                           (- (char-int common-item) 96)
                                                           (- (char-int common-item) 38)))))))
    combined-prio))

(defun day-03-2 ()
  (let ((first-bag (list))
        (second-bag (list))
        (third-bag (list))
        (common-item "")
        (three-prio (list))
        (combined-prio 0))
    (with-open-file (stream "input-03")
      (loop :for line = (read-line stream nil nil)
            :while line
            :do (progn
                  (push line three-prio)
                  (if (= 3 (length three-prio))
                      (progn
                        (setq first-bag (concatenate 'list (nth 0 three-prio)))
                        (setq second-bag (concatenate 'list (nth 1 three-prio)))
                        (setq third-bag (concatenate 'list (nth 2 three-prio)))
                        (setq three-prio (list))
                        (setq common-item (car (intersection (intersection first-bag second-bag) third-bag)))
                        (setq combined-prio (+ combined-prio (if (lower-case-p common-item)
                                                                 (- (char-int common-item) 96)
                                                                 (- (char-int common-item) 38)))))))))
    combined-prio))

(subseq "test" 0 (/ (length "test") 2))
(loop :for item :in (concatenate 'list "this") :do (format t "~A~%" item))
(- (char-int (car (intersection first-half second-half))) 64)
